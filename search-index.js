var searchIndex = JSON.parse('{\
"http_parser":{"doc":"","i":[[5,"main","http_parser","",null,[[],[["result",4],["parsingerror",4]]]],[0,"parser","","",null,null],[3,"Request","http_parser::parser","The HTTP request structure.",null,null],[12,"method","","The method of the request, it can be one of: `OPTIONS`,…",0,null],[12,"request_uri","","",0,null],[12,"http_version","","",0,null],[12,"header","","",0,null],[12,"body","","",0,null],[3,"HttpRequestParser","","The `Parser` structure.",null,null],[12,"packet","","",1,null],[12,"request","","",1,null],[12,"state","","",1,null],[3,"RequestLine","","The `RequestLine`, the parser starting state.",null,null],[12,"state","","",2,null],[3,"Method","","The method of the request line.",null,null],[3,"Uri","","The URI of the request line.",null,null],[3,"Version","","The HTTP version part of the request line.",null,null],[3,"Header","","The `Header` state.",null,null],[3,"Body","","The `Body` state.",null,null],[4,"ParsingError","","Errors types for the parser.",null,null],[13,"InvalidMethod","","An invalid request method was detected (e.g. `ADD`).",3,null],[13,"InvalidVersion","","An invalid version was detected (e.g. `HTTP/0`).",3,null],[13,"UnexpectedEndOfPacket","","Unexpected reach to the end of the packet.",3,null],[5,"is_valid_method","","Checks if the given string slice is a valid HTTP method…",null,[[]]],[5,"is_valid_version","","Checks if the HTTP version is a valid version.",null,[[]]],[5,"is_crlf","","Check if a pair of bytes are CRLF.",null,[[]]],[5,"is_whitespace","","Check if a byte is whitespace.",null,[[]]],[6,"Result","","Possible transitions which can error return `Result<T,…",null,null],[6,"RequestLineParser","","Short form for `HttpRequestParser<\'a, RequestLine<S>>`.",null,null],[8,"Parse","","The provides the means of state transition for the parser,…",null,null],[16,"NextState","","`NextState` type are of kind `Parser<\'a, State>` Sadly we…",4,null],[10,"parse","","Parse the existing content consuming it in the process, in…",4,[[]]],[8,"RequestParserState","","A trait for the request parser states.",null,null],[8,"RequestLineParserState","","A trait for request line parser states.",null,null],[11,"new","","Create a new `Request`.",0,[[]]],[11,"skip_spaces","","Skip existing spaces (other whitespace is not considered).",1,[[]]],[11,"skip_crlf","","If the next two characters are `\\\\r\\\\n`.",1,[[],[["parsingerror",4],["result",4]]]],[11,"parse_until_char","","",1,[[]]],[11,"start","","Create a new `HttpRequestParser` which starts in…",1,[[],[["requestline",3],["httprequestparser",3]]]],[11,"parse_line","","Parse a line in the header.",1,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"parse","","",1,[[]]],[11,"parse","","",1,[[]]],[11,"parse","","",1,[[]]],[11,"parse","","",1,[[]]],[11,"parse","","Parse the body (which is composed of all remaining bytes)…",1,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]]],"p":[[3,"Request"],[3,"HttpRequestParser"],[3,"RequestLine"],[4,"ParsingError"],[8,"Parse"],[3,"Method"],[3,"Uri"],[3,"Version"],[3,"Header"],[3,"Body"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);